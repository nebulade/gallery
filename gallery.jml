
ListDelegate @ Item {
    width: this.parent.width
    height: 100
    backgroundColor: this.ma.mousePressed ? "#3C7DC1" : "black"
    overflow: "hidden"

    BackgroundImage {
        id: image
        width: this.parent.height
        height: this.parent.height
        src: this.parent.modelData.thumbnail
        backgroundSize: "cover"
    }

    Label {
        left: this.image.left + this.image.width + 10
        top: this.parent.height/2 - this.height/2
        text: this.parent.modelData.name
        color: this.ma.mousePressed ? "white" : "#3C7DC1"
    }

    InputItem {
        id: ma
        onactivated: this.parent.parent.parent.showAlbum(this.parent.modelData)
    }
}

BusyIndicator @ Item {
    height: 10
    width: 70
    currentActive: this.one

    onload: ^{
        var that = this;
        setInterval(function () {
            var a = that.currentActive;
            if (a === that.one) {
                that.currentActive = that.two;
            } else if (a === that.two) {
                that.currentActive = that.three;
            } else if (a === that.three) {
                that.currentActive = that.four;
            } else if (a === that.four) {
                that.currentActive = that.one;
            }
        }, 300);
    }^

    Item {
        id: one
        top: 0
        left: 0
        backgroundColor: "#3C7DC1"
        width: 10
        height: 10
        opacity: this.parent.currentActive === this ? 1 : 0

        Behavior {
            opacity: "250ms"
        }
    }

    Item {
        id: two
        top: 0
        left: 20
        backgroundColor: "#3C7DC1"
        width: 10
        height: 10
        opacity: this.parent.currentActive === this ? 1 : 0

        Behavior {
            opacity: "250ms"
        }
    }

    Item {
        id: three
        top: 0
        left: 40
        backgroundColor: "#3C7DC1"
        width: 10
        height: 10
        opacity: this.parent.currentActive === this ? 1 : 0

        Behavior {
            opacity: "250ms"
        }
    }

    Item {
        id: four
        top: 0
        left: 60
        backgroundColor: "#3C7DC1"
        width: 10
        height: 10
        opacity: this.parent.currentActive === this ? 1 : 0

        Behavior {
            opacity: "250ms"
        }
    }
}

GridDelegate @ Item {
    width: this.parent.delegateSize
    height: this.parent.delegateSize
    overflow: "hidden"
    image: ""

    BackgroundImage {
        width: this.parent.width
        height: this.parent.height
        src: this.parent.modelData.thumbnail
        backgroundSize: "cover"
    }

    InputItem {
        onactivated: this.parent.parent.parent.showImage(this.parent.image)
    }
}

Window {
    id: window
    width: this.innerWidth
    height: this.innerHeight
    overflow: "hidden"
    currentView: this.listView

    function showImage(image): ^{
        console.log("-- load image", image);
        var that = this;
        // var i = new Image();
        // i.onload = function () {
            that.fullscreenImage.src = image;
            that.currentView = that.fullscreenImage;
        // };
        // i.src = image;
    }^

    function showAlbum(album): ^{
        app.loadAlbum(album);
        this.currentView = this.gridView;
    }^

    function back(): ^{
        if (this.currentView === this.fullscreenImage)
            this.currentView = this.gridView;
        else if (this.currentView === this.gridView)
            this.currentView = this.listView;
    }^

    ListView {
        id: listView
        left: this.parent.currentView === this ? 0 : -this.width
        delegate: ListDelegate;

        Behavior {
            left: "250ms"
        }
    }

    GridView {
        id: gridView
        delegate: GridDelegate;
        delegateSize: this.parent.innerWidth/3.0
        width: this.parent.width
        height: this.parent.height
        left: this.parent.currentView === this ? 0 : this.width

        Behavior {
            left: "250ms"
        }
    }

    Item {
        id: fullscreenImage
        src: ""
        width: this.parent.innerWidth
        height: this.parent.innerHeight
        left: this.parent.currentView === this ? 0 : this.width
        opacity: this.parent.currentView === this ? 1 : 0
        backgroundColor: "black"

        BusyIndicator {
            left: this.parent.width/2 - this.width/2
            top: this.parent.height/2 - this.height/2
        }

        BackgroundImage {
            src: this.parent.src
            backgroundSize: "contain"
            width: this.parent.width
            height: this.parent.height
        }

        Behavior {
            left: "250ms"
            opacity: "1000ms"
        }
    }


    Button {
        id: backButton
        width: this.parent.width
        top: this.parent.height - (this.parent.currentView === this.listView ? 0 : this.height)
        label: "BACK"

        Behavior {
            top: "250ms"
        }

        onactivated: this.parent.back();
    }
}
