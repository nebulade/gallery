
GridDelegate @ Item {
    width: this.parent.delegateSize
    height: this.parent.delegateSize

    Image {
        width: this.parent.width
        height: this.parent.height
        src: this.parent.modelData.image
        backgroundSize: "cover"
        backgroundPosition: "center"
    }

    InputItem {
        onactivated: this.parent.parent.parent.showImage(this.parent.modelData.image)
    }
}

Window {
    id: window
    width: this.innerWidth
    height: this.innerHeight
    overflow: "hidden"
    currentView: this.gridView

    function showImage(image): ^{
        this.fullscreenImage.src = image;
        this.currentView = this.fullscreenImage;
    }^

    function back(): ^{
        this.currentView = this.gridView
    }^

    Item {
        id: gridView
        overflow: "scroll"
        backgroundColor: "rgba(0,0,0,0.5)"
        delegate: GridDelegate;
        delegateSize: this.parent.innerWidth/3
        width: this.parent.width
        height: this.parent.height
        left: this.parent.currentView === this ? 0 : -this.width
        delegates: []

        Behavior {
            left: "250ms"
        }

        function addDelegate(data): ^{
            var delegate = this.createdelegate();
            this.delegates.push(delegate);
            delegate.modelData = data;
            this.addChild(delegate);
            delegate.initializeBindings();
        }^

        function layout(): ^{
            var left = 0;
            var top = 0;
            var delegatesPerLine = Math.ceil(this.width / this.delegateSize);

            for (var i = 0; i < this.delegates.length; ++i) {
                var d = this.delegates[i];

                d.left = left;
                d.top = top;

                if ((i+1) % delegatesPerLine) {
                    left += d.width;
                } else {
                    top += d.height;
                    left = 0;
                }
            }
        }^
    }

    Item {
        id: fullscreenImage
        src: ""
        width: this.parent.innerWidth
        height: this.parent.innerHeight
        left: this.parent.currentView === this ? 0 : this.width
        backgroundColor: "black"

        Image {
            src: this.parent.src
            backgroundSize: "contain"
            backgroundPosition: "center"
            background-repeat: "no-repeat"
            width: this.parent.width
            height: this.parent.height
        }

        Behavior {
            left: "250ms"
        }

        InputItem {
            onactivated: this.parent.parent.back();
        }
    }
}
