
ListDelegate @ Item {
    width: this.parent.width
    height: 100
    backgroundColor: "black"
    borderStyle: "solid"
    borderWidth: "1px 0 0 0"
    borderColor: "darkgray"

    Image {
        id: image
        width: this.parent.height
        height: this.parent.height
        src: this.parent.modelData.thumbnail
        backgroundSize: "cover"
        backgroundPosition: "center"
    }

    Text {
        left: this.image.left + this.image.width + 10
        top: this.parent.height/2 - this.height/2
        height: this.textHeight
        text: this.parent.modelData.name
        color: "#3C7DC1"
        fontSize: 32
    }

    InputItem {
        onactivated: this.parent.parent.parent.showAlbum(this.parent.modelData)
    }
}

GridDelegate @ Item {
    width: this.parent.delegateSize
    height: this.parent.delegateSize

    Image {
        width: this.parent.width
        height: this.parent.height
        src: this.parent.modelData.thumbnail
        backgroundSize: "cover"
        backgroundPosition: "center"
    }

    InputItem {
        onactivated: this.parent.parent.parent.showImage(this.parent.modelData.image)
    }
}

Window {
    id: window
    width: this.innerWidth
    height: this.innerHeight
    overflow: "hidden"
    currentView: this.listView

    function showImage(image): ^{
        this.fullscreenImage.src = image;
        this.currentView = this.fullscreenImage;
    }^

    function showAlbum(album): ^{
        app.loadAlbum(album);
        this.currentView = this.gridView;
    }^

    function back(): ^{
        if (this.currentView === this.fullscreenImage)
            this.currentView = this.gridView;
        else if (this.currentView === this.gridView)
            this.currentView = this.listView;
    }^

    Item {
        id: listView
        left: this.parent.currentView === this ? 0 : -this.width
        width: this.parent.width
        height: this.parent.height
        overflow: "scroll"
        delegate: ListDelegate;
        delegateSize: this.width
        delegates: []

        Behavior {
            left: "250ms"
        }

        function addDelegate(data): ^{
            var delegate = this.createdelegate();
            this.delegates.push(delegate);
            delegate.modelData = data;
            this.addChild(delegate);
            delegate.initializeBindings();
        }^

        function layout(): ^{
            var top = 0;

            for (var i = 0; i < this.delegates.length; ++i) {
                var d = this.delegates[i];
                d.top = top;
                top += d.height;
            }
        }^
    }

    Item {
        id: gridView
        overflow: "scroll"
        delegate: GridDelegate;
        delegateSize: this.parent.innerWidth/3
        width: this.parent.width
        height: this.parent.height
        left: this.parent.currentView === this ? 0 : this.width
        delegates: []

        Behavior {
            left: "250ms"
        }

        function clear(): ^{
            this.removeChildren();
            this.delegates = [];
        }^

        function addDelegate(data): ^{
            var delegate = this.createdelegate();
            this.delegates.push(delegate);
            delegate.modelData = data;
            this.addChild(delegate);
            delegate.initializeBindings();
        }^

        function layout(): ^{
            var left = 0;
            var top = 0;
            var delegatesPerLine = Math.ceil(this.width / this.delegateSize);

            for (var i = 0; i < this.delegates.length; ++i) {
                var d = this.delegates[i];

                d.left = left;
                d.top = top;

                if ((i+1) % delegatesPerLine) {
                    left += d.width;
                } else {
                    top += d.height;
                    left = 0;
                }
            }
        }^
    }

    Item {
        id: fullscreenImage
        src: ""
        width: this.parent.innerWidth
        height: this.parent.innerHeight
        left: this.parent.currentView === this ? 0 : this.width
        opacity: this.parent.currentView === this ? 1 : 0
        backgroundColor: "black"

        Image {
            src: this.parent.src
            backgroundSize: "contain"
            backgroundPosition: "center"
            background-repeat: "no-repeat"
            width: this.parent.width
            height: this.parent.height
        }

        Behavior {
            left: "250ms"
            opacity: "1000ms"
        }
    }

    InputItem {
        id: backButton
        backgroundColor: "#3C7DC1"
        width: this.parent.width
        height: this.label.textHeight + 10
        top: this.parent.height - (this.parent.currentView === this.listView ? 0 : this.height)

        Behavior {
            top: "250ms"
        }

        Text {
            id: label
            left: this.parent.width/2 - this.width/2
            top: this.parent.height/2 - this.height/2
            height: this.textHeight
            width: this.textWidth
            text: "BACK"
            color: "white"
            fontSize: 32
        }

        onactivated: this.parent.back();
    }
}
